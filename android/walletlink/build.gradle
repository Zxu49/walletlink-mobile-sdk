apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply from: '../gradle/dependencies.gradle'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 28

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.pinterest:ktlint:${otherVersions.ktlint}"

    kapt(
        // Room
        "androidx.room:room-compiler:${versions.room}",
        // Moshi
        "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}",
    )

    implementation(
        // Kotlin
        "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",

        // Logging
        "com.jakewharton.timber:timber:${versions.timber}",

        // ReactiveX 2
        "io.reactivex.rxjava2:rxjava:${versions.rxJava}",
        "io.reactivex.rxjava2:rxkotlin:${versions.rxKotlin}",

        // Retrofit - Type-safe HTTP client for Android and Java
        "com.squareup.retrofit2:retrofit:${versions.retrofit}",

        // Room
        "androidx.room:room-runtime:$versions.room",
        "androidx.room:room-rxjava2:$versions.room",

        // Moshi
        "com.squareup.moshi:moshi:${versions.moshi}",

        // Coroutine
        "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutine}",

        project(path: ':libraries:core'),
        project(path: ':libraries:stores'),
        project(path: ':libraries:http'),
        project(path: ':libraries:crypto'),
    )

    api(
        project(path: ':libraries:databases')
    )

    testImplementation(
        "junit:junit:${testVersions.junit4}"
    )

    androidTestImplementation(
        "androidx.test.ext:junit:${testVersions.androidXTestExtJUnit}",
        "androidx.test:runner:${testVersions.androidXTestRunner}",
        "androidx.test:core:${testVersions.androidXTestCore}"
    )
}

repositories {
    mavenCentral()
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}
